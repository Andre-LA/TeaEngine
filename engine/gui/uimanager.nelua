global WINDOW_AMOUNT <comptime> = 20

global UIManager = @record {
	Windows: [WINDOW_AMOUNT]UIWindow,
	windowSpotsAvailable: [WINDOW_AMOUNT]boolean,
	nextWindowSpot: cint
}

function UIManager:AddWidget(uWidgetType: string, uWidgetName: string)
	for i: usize, window: *UIWindow in mipairs(self.Windows) do
		window.Widgets[window.nextWidgetSpotAvailable] = (Widget){widgetType = uWidgetType, widgetName = uWidgetName}
	end
end

function UIManager:Initiate() end

function UIManager:Update() 
	for i: usize, window: *UIWindow in mipairs(self.Windows) do
		window:Draw()
		for i: usize, widget: *Widget in mipairs(window.Widgets) do
			widget:Update()
		end
	end
end

function UIManager:AddWindow(uWindowName: string, uMenuBarText: string, uPos: Vector2, uSize: Vector2, uBorderColor: Color, uBGColor: Color, uFGColor: Color, uBorderSize: cint, uMenuTextPadding: cint, menuBarSize: cint, uMenuFontSize: cint) 
	self.nextWindowSpot = Utility:NextSpot(self.windowSpotsAvailable)
	
	self.Windows[self.nextWindowSpot] = (UIWindow){array(Widget, 20), uWindowName, uMenuBarText, uPos, uSize, uBorderColor, uBGColor, uFGColor, uBorderSize, uMenuTextPadding, menuBarSize, uMenuFontSize}
end

function UIManager:GetWindow(uWindowName: string): UIWindow
	for i: usize, window in ipairs(self.Windows) do
		return window
	end

	InformationHandler:Warn("No window found with the name")
	return UIWindow
end

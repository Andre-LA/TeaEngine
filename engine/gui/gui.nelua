global WIDGET_AMOUNT <comptime> = 20

global Widget = @record {

	-- Strings
	widgetName: string,
	widgetType: string,

	-- Booleans
	spaceOccupied: boolean,
	isHighlighted: boolean,
	isDown: boolean,

	-- Vector2s
	tl: Vector2,
	br: Vector2
}

global UIWindow = @record {

	-- Widgets
	Widgets: [WIDGET_AMOUNT]Widget,

	-- Strings
	menuBarText: string,
	windowName: string,

	-- Vector2s
	size: Vector2,
	pos: Vector2,

	-- Colors
	borderColor: Color,
	bgColor: Color,
	fgColor: Color,

	-- Cints
	nextWidgetSpotAvailable: cint,
	menuTextPadding: cint,
	menuFontSize: cint,
	menuBarSize: cint,
	borderSize: cint,
	
	-- Booleans
	widgetSpotsAvailable: [WIDGET_AMOUNT]boolean,
	menuBarEnabled: boolean,

	-- Strings
	menuBarText: string,
}

function Widget:Draw() 
	if self.widgetType == "Button" then
		if Utility:IsInsideQuad((Vector2){Mouse.x, Mouse.y}, self.tl, self.br) then
			self.isHighlighted = true
		else
			self.isHighlighted = false
		end

		if self.isHighlighted and Mouse.LMBDown then
			self.isDown = true		
		else
			self.isDown = false
		end
	else
		InformationHandler:Warn("Unaware of the widget type")
	end
end

function Widget:Update() 
	self:Draw()
end

function UIWindow:Draw()
	if self.borderSize > 0 then
		DrawRectangle(self.pos.x, self.pos.y, self.size.x, self.size.y, self.borderColor)
		DrawRectangle(self.pos.x + self.borderSize, self.pos.y + self.borderSize, self.size.x - self.borderSize * 2, self.size.y - self.borderSize * 2, self.bgColor)
	else
		DrawRectangle(self.pos.x, self.pos.y, self.size.x, self.size.y, self.bgColor)
	end

	if self.menuBarEnabled then
		DrawRectangle(self.pos.x, self.pos.y, self.size.x, self.menuBarSize, self.borderColor) 
		DrawRectangle(self.pos.x + self.borderSize, self.pos.y + self.borderSize, self.size.x - self.borderSize * 2, self.menuBarSize - self.borderSize * 2, self.bgColor)
		DrawText(self.menuBarText, self.pos.x	+ self.borderSize + self.menuTextPadding, self.pos.y + self.borderSize + self.menuTextPadding, self.menuFontSize, self.fgColor)
	end
end

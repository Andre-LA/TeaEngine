local UIManagerClass = @record {
	Windows: vector(UIWindow),
	insideElement: boolean,
}

function UIManagerClass:AddWidget(uWindowName: string, uWidgetName: string, uWidgetType: string, uWidgetText: string, uWidgetFontSize: cint, uWidgetPosition: Vector2, uWidgetSize: Vector2, uWidgetAlwaysDrawn: boolean)
	for i: usize, window: *UIWindow in mipairs(self.Windows) do
		if window.windowName == uWindowName then
			window.Widgets:push((Widget){uWidgetName, uWidgetType, uWidgetText, uWidgetFontSize, uWidgetPosition, uWidgetSize, window.borderSize, true, window.borderColor, window.bgColor, window.fgColor, (Vector2){window.pos.x, window.pos.y}})
			window.Widgets[#window.Widgets - 1].alwaysDrawn = uWidgetAlwaysDrawn
			window.Widgets[#window.Widgets - 1]:Init()
			EventManager:AddEvent(uWidgetName)

			for i: usize, widget: *Widget in mipairs(window.Widgets) do
				if widget.widgetName == window.windowName.."ResetButton" or widget.widgetName == window.windowName.."MinimiseButton" then
					widget.isShown = true
				end
			end
		end
	end
end

function UIManagerClass:ToggleWindow(uWindowName: string)
	for i: usize, window: *UIWindow in mipairs(self.Windows) do
		if window.windowName == uWindowName then
			window.isShown = not window.isShown
		end
	end
end

function UIManagerClass:ResetWindowPosition(uWindowName: string)
	for i: usize, window: *UIWindow in mipairs(self.Windows) do
		if window.windowName == uWindowName then
			window.pos = window.originalPosition
		end
	end
end

function UIManagerClass:Update()
	self.insideElement = false

	for i: usize, window: *UIWindow in mipairs(self.Windows) do
		window:Update()
		window:Draw()

		if EventManager:GetEvent(window.windowName.."MinimiseButton").fired then
			self:ToggleWindow(window.windowName)
			EventManager:Cleanup(window.windowName.."MinimiseButton")
		end

		if EventManager:GetEvent(window.windowName.."ResetButton").fired then
			self:ResetWindowPosition(window.windowName)
			EventManager:Cleanup(window.windowName.."ResetButton")
		end

		for i: usize, widget: *Widget in mipairs(window.Widgets) do
			widget.windowPosition = window.pos
			widget.isShown = window.isShown
			widget:UpdateVW()
			widget:Update()

			if Utility:IsInsideQuad((Vector2){Mouse.x, Mouse.y}, widget.tlW, widget.brW) then
				widget.isHighlighted = true
				self.insideElement = true
			end
		end

		if self.insideElement then
			Mouse.insideUIElement = true
			window.grabDebounce = 0
		else
			Mouse.insideUIElement = false
		end
	end
end

function UIManagerClass:ClearWindows()
	self.Windows:clear()
end

function UIManagerClass:AddWindow(uMenuBarText: string, uWindowName: string, uSize: Vector2, uPosition: Vector2, uBorderColor: Color, uFGColor: Color, uBGColor: Color, uMenuTextPadding: cint, uMenuFontSize: cint, uMenuBarSize: cint, uBorderSize: cint, uMenuBarEnabled: boolean)
	self.Windows:push((UIWindow){uMenuBarText, uWindowName, uSize, uPosition, uBorderColor, uFGColor, uBGColor, 0, uMenuTextPadding, uMenuFontSize, uMenuBarSize, uBorderSize, uMenuBarEnabled})
	self.Windows[#self.Windows - 1]:Init()
	self:AddWidget(uWindowName, uWindowName.."MinimiseButton", "Button", "", 6, (Vector2){self.Windows[#self.Windows - 1].size.x - self.Windows[#self.Windows - 1].borderSize * 6 - 20, self.Windows[#self.Windows - 1].borderSize * 2}, (Vector2){self.Windows[#self.Windows - 1].borderSize * self.Windows[#self.Windows - 1].borderSize, self.Windows[#self.Windows - 1].borderSize * self.Windows[#self.Windows - 1].borderSize}, true)
	self:AddWidget(uWindowName, uWindowName.."ResetButton", "Button", "", 6, (Vector2){self.Windows[#self.Windows - 1].size.x - self.Windows[#self.Windows - 1].borderSize * 6, self.Windows[#self.Windows - 1].borderSize * 2}, (Vector2){self.Windows[#self.Windows - 1].borderSize * self.Windows[#self.Windows - 1].borderSize, self.Windows[#self.Windows - 1].borderSize * self.Windows[#self.Windows - 1].borderSize}, true)
end

function UIManagerClass:GetWindow(uWindowName: string): UIWindow
	for i: usize, window in ipairs(self.Windows) do
		return window
	end

	return (UIWindow){} 
end

global UIManager: UIManagerClass

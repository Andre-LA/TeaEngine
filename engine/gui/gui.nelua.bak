-- Requires raylib

local UIButton = @record {
	name: string,
	isOccupied: boolean,

	isHighlighted: boolean,
	isDown: boolean,
	tl: Vector2,
	br: Vector2
}

local UIWindow = @record {
	windowName: string,

	position: Vector2,
	size: Vector2,
	borderColor: Color,
	borderSize: cint,
	bgColor: Color,
	fgColor: Color,

	menuBarAvailable: boolean,
	menuBarSize: cint,
	menuText: string,
	textPad: cint,
	fSize: cint,

	isOccupied: boolean
}

local UIManagerClass = @record {
	spacesLeft: boolean,
	UIWindows: [20]UIWindow,
}

-- [[ Record functions ]] --

--[[function UIManagerClass:AddButtonToWindow(uWindowName: string, uButtonName: string)
	for i: usize, window: *UIWindow in mipairs(self.UIWindows) do
		window.buttons[window.nextButtonSpotFree] = (UIButton){name = uButtonName}

		print(window.buttons[1].name)
	end
end

function UI:UpdateNextSpotFree(): cint
	for i: usize, window: *UIWindow in mipairs(self.UIWindows) do
		for i: usize, freeSpot: boolean in ipairs(window.buttonSpotsFree) do
			if freeSpot then
				InformationHandler:Log("Found a spot!")
				self.spacesLeft = true
				return i 
			end
		end
	end
	
	InformationHandler:Warn("No button spaces left!")
	self.spacesLeft = false
	return -1
end--]]

function UIButton:Update()
	if Utility:IsInsideQuad((Vector2){Mouse.x, Mouse.y}, self.tl, self.br) then
		self.isHighlighted = true
	else
		self.isHighlighted = false
	end

	if self.isHighlighted and Mouse.LMBDown then
		self.isDown = true
	else
		self.isDown = false	
	end
end

function UIWindow:Draw()
	if self.borderSize > 0 then
		DrawRectangle(self.position.x, self.position.y, self.size.x, self.size.y, self.borderColor)
		DrawRectangle(self.position.x + self.borderSize, self.position.y + self.borderSize, self.size.x - self.borderSize * 2, self.size.y - self.borderSize * 2, self.bgColor)
	else
		DrawRectangle(self.position.x, self.position.y, self.size.x, self.size.y, self.bgColor)
	end

	if self.menuBarAvailable then
		DrawRectangle(self.position.x, self.position.y, self.size.x, self.menuBarSize, self.borderColor) 
		DrawRectangle(self.position.x + self.borderSize, self.position.y + self.borderSize, self.size.x - self.borderSize * 2, self.menuBarSize - self.borderSize * 2, self.bgColor)
		DrawText(self.menuText, self.position.x	+ self.borderSize + self.textPad, self.position.y + self.borderSize + self.textPad, self.fSize, self.fgColor)
	end
end

function UIManagerClass:Initiate()
	self.spacesLeft = true
end

function UIManagerClass:UpdateWindows()
	for i: usize, window: *UIWindow in mipairs(self.UIWindows) do
		window:Draw()		
		for i: usize, button: *UIButton in mipairs(window.buttons) do
			button:Update()
		end
	end
end

function UIManagerClass:AddWindow(uWindowName: string, uPosition: Vector2, uSize: Vector2, uBorderSize: cint, uBorderColor: Color, uBGColor: Color, uFGColor: Color, uMenuBarAvailable: boolean, uMenuBarSize: cint, uMenuText: string, uTextPad: cint, uFSize: cint)

		--[[if self.spacesLeft then
			self.UIWindows[self.nextWindowSpotFree] = (UIWindow){uWindowName, uPosition, uSize, uBorderColor, uBorderSize, uBGColor, uFGColor, uMenuBarAvailable, uMenuBarSize, uMenuText, uTextPad, uFSize, false}
		else
			print(self.spacesLeft)
			InformationHandler:RaiseError(2, "There are no window spaces left!")
		end--]]
end

function UIManagerClass:GetWindow(uWindowName: string): UIWindow
	for i: usize, window: UIWindow in ipairs(self.UIWindows) do
		if window.windowName == uWindowName then
			return window
		end
	end

	InformationHandler:Warn("No window found!")

	return (UIWindow){}
end

global UIManager: UIManagerClass
